<?php

/**
 * @file
 * Install, update and uninstall functions for the Metadata Hex module.
 */

/**
 * Implements hook_install().
 */
function metadata_hex_install() {
  \Drupal::messenger()->addStatus(__FUNCTION__);
}

/**
 * Implements hook_uninstall().
 */
function metadata_hex_uninstall() {
  \Drupal::messenger()->addStatus(__FUNCTION__);
}

/**
 * Implements hook_schema().
 */
/**
 * Implements hook_schema().
 */

function metadata_hex_schema() {
  // $schema['metadata_hex_processed'] = [
  //   'description' => 'Table to track processed entities.',
  //   'fields' => [
  //     'id' => [
  //       'type' => 'serial',
  //       'unsigned' => TRUE,
  //       'not null' => TRUE,
  //     ],
  //     'entity_type' => [
  //       'type' => 'varchar',
  //       'length' => 32,
  //       'not null' => TRUE,
  //       'description' => 'The type of the entity (e.g., node, user).',
  //     ],
  //     'entity_id' => [
  //       'type' => 'int',
  //       'unsigned' => TRUE,
  //       'not null' => TRUE,
  //       'description' => 'The ID of the entity.',
  //     ],
  //     'last_modified' => [
  //       'description' => 'Timestamp of the last time the node was processed.',
  //       'type' => 'timestamp',
  //       'not null' => TRUE,
  //       'default' => 'CURRENT_TIMESTAMP',
  //     ],
  //     'processed' => [
  //       'type' => 'int',
  //       'not null' => TRUE,
  //       'default' => 1,
  //       'description' => 'A flag indicating whether the entity has been processed.',
  //     ],
  //   ],
  //   'primary key' => ['id'], // Fix: Ensure SERIAL ID is the primary key
  //   'unique keys' => [
  //     'entity_type_entity_id' => ['entity_type', 'entity_id'], // Fix: Unique constraint on these
  //   ],
  // ];

  // return $schema;
  $schema['metadata_hex_processed'] = [
    'description' => 'Stores information about processed entities.',
    'fields' => [
      'id' => [
        'description' => 'Primary Key: Unique ID for each record.',
        'type' => 'integer',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'auto_increment' => TRUE,
      ],
      'entity_type' => [
        'description' => 'The type of the entity (e.g., node, user).',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ],
      'entity_id' => [
        'description' => 'The ID of the entity.',
        'type' => 'integer',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'last_modified' => [
        'description' => 'Timestamp of the last time the entity was processed.',
        'type' => 'datetime',
        'not null' => TRUE,
      ],
      'processed' => [
        'description' => 'Flag indicating whether the entity has been processed.',
        'type' => 'integer',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'entity_id' => ['entity_id'],
    ],
  ];

  return $schema;

}
/**
 * Implements hook_requirements().
 */
function metadata_hex_requirements($phase) {
  $requirements = [];

  if ($phase == 'runtime') {
    $value = mt_rand(0, 100);
    $requirements['metadata_hex_status'] = [
      'title' => t('Metadata Hex status'),
      'value' => t('Metadata Hex  value: @value', ['@value' => $value]),
      'severity' => $value > 50 ? REQUIREMENT_INFO : REQUIREMENT_WARNING,
    ];
  }

  return $requirements;
}
